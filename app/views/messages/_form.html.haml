= form_with model: message, url: messages_path, class: 'needs-validation mt-2 contact-form', id: 'contact-form', html: { novalidate: true }, data: { url: messages_url } do |form|
  -# Simple honeypot to catch bots spamming the form
  = form.text_field :special_type, class: 'special-input', autocomplete: 'off'

  - if product
    = form.hidden_field :product_id, value: product.id

  %div.form-row.form-group.justify-content-center
    - if about_select
      = form.hidden_field :about, value: 'misc'
      -#
        TODO: Permanently remove?
        %div.col-12.col-md-4.input-group
          %div.input-group-prepend
            = form.label :about, t('message.about'), class: 'input-group-text', for: 'contact-about-select'
          = form.select :about, Message.about_options.map{ |o| [o.titleize, o] }, { include_blank: true}, { id: 'contact-about-select', class: 'custom-select', required: true }
          %div.invalid-feedback
            = t('message.invalid_feedback.about')
    - else
      = form.hidden_field :about, value: 'product'
  %div.d-flex.justify-content-around.product-message-loading-container
    %div.d-flex.spinner-border.align-self-center.product-message-loading-spinner{ role: 'status' }
      %span.sr-only= t('loading')
  %div.message-form-product-fields
    %div.form-row.form-group
      %div.col-12.col-md-3
        = form.label :author, t('message.author'), class: 'form-label sr-only'
        = form.text_field :author, placeholder: t('message.name'), class: 'form-control', required: true
        %div.invalid-feedback
          = t('message.invalid_feedback.name')
      %div.col-12.col-md-3
        = form.label :phone, t('message.phone_number'), class: 'form-label sr-only'
        = form.phone_field :phone, placeholder: t('message.phone_number'), class: 'form-control', data: { group: 1 }
        %div.invalid-feedback
          = t('message.invalid_feedback.phone_number')
      %div.col-12.col-md-6
        = form.label :email, t('message.email'), class: 'form-label sr-only'
        = form.email_field :email, placeholder: t('message.email_placeholder'), class: 'form-control', data: { group: 1 }
        %div.invalid-feedback
          = t('message.invalid_feedback.email')
    %div.form-row.form-group
      %div.col-5
        = form.label :title, t('message.title'), class: 'form-lable sr-only'
        = form.text_field :title, placeholder: t('message.title'), class: 'form-control', required: true
        %div.invalid-feedback
          = t('message.invalid_feedback.title')
    %div.form-row.form-group
      %div.col-12
        = form.label :body, t('message.body'), class: 'form-label sr-only'
        = form.text_area :body, rows: 7, placeholder: t('message.body_placeholder'), class: 'form-control w-100', required: true
        %div.invalid-feedback
          = t('message.invalid_feedback.body')

  %div.form-group.clearfix
    = form.submit t('message.send'), class: 'btn btn-success float-right product-message-submit-button', id: 'message-submit-button'
    %button.product-message-loading-button.btn.btn-success.float-right{ disabled: 'disabled' }
      %span.spinner-border.spinner-border-sm{ role: 'status', 'aria-hidden': 'true' }
      %span= t('message.sending')

  - content_for :turbolinks_pack do
    = javascript_pack_tag 'contact', 'data-turbolinks-track': 'reload'
